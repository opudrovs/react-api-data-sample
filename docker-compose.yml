services:
  postgres:
    image: postgres:15
    container_name: taskmanager_test_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - taskmanager_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 5s
      retries: 5
      timeout: 3s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: taskmanager_backend
    restart: always
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - ENABLE_SWAGGER=${ENABLE_SWAGGER}
      - NODE_ENV=production
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "4000:4000"
    command: >
      sh -c "
      npm run prisma:generate &&
      npx prisma migrate deploy &&
      npm run prisma:seed &&
      npm run build &&
      npm run start"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: taskmanager_frontend
    restart: always
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - INTERNAL_API_URL=${INTERNAL_API_URL}
      - NODE_ENV=production
    depends_on:
      - backend
    ports:
      - "3000:3000"
    command: >
      sh -c "
      npm run build &&
      npm run start"

volumes:
  taskmanager_pgdata:
